{"version":3,"sources":["redux-app/components/Style.ts","redux-app/enums/index.ts","redux-app/components/TeamComposer.tsx","redux-app/constants/index.ts","redux-app/actions/TeamManagerActions.ts","redux-app/selectors/getPlayerDetails.ts","redux-app/containers/ConnectedTeamComposer.tsx","redux-app/containers/ConnectedFirstQuarter.tsx","redux-app/components/FirstQuarter.tsx","redux-app/components/TeamManager.tsx","App.tsx","redux-app/store/index.ts","redux-app/reducers/teamManagerRootReducer.ts","redux-app/service/createTeamManagerInstance.ts","reportWebVitals.ts","index.tsx"],"names":["Positions","StyledTeamManagerWrapper","styled","Grid","StyledTeamComposerWrapper","StyledFirstQuarter","ADD_PLAYER","playerId","getPlayerDetails","state","domain","players","ConnectedTeamComposer","connect","dispatch","ownProps","onAddButtonClick","playerDetails","type","payload","id","firstName","lastName","height","position","addPlayer","showFirstQuarterTab","props","React","setFirstName","setLastName","setHeight","positions","setPositions","heightError","setHeightError","blankError","setBlankError","container","direction","justify","alignItems","TextField","required","className","error","label","value","onChange","event","target","helperText","test","FormControl","InputLabel","Select","labelId","multiple","input","Input","renderValue","selected","join","Object","values","map","MenuItem","Checkbox","checked","indexOf","ListItemText","primary","Button","variant","color","onClick","length","Number","Alert","severity","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","player","ConnectedFirstQuarter","playersFinalised","setPlayersFinalised","selectAllPlayersWarning","setSelectAllPlayersWarning","setError","playersList","setPlayersList","handlePlayerChange","playersData","push","index","splice","addPlayers","playerIdList","duplicateId","find","redundantData","forEach","handleError","item","sm","defaultValue","includes","TeamManager","tabValue","setTabValue","disable","setDisable","AppBar","Tabs","newValue","Tab","disabled","App","store","configureStore","reducer","combineReducers","action","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66b41bb4.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport const StyledTeamManagerWrapper = styled(Grid)`\r\n    height: 100%;\r\n`\r\n\r\nexport const StyledTeamComposerWrapper = styled(Grid)`\r\n    height: 100%;\r\n\r\n    .inputFields{\r\n        margin: 10px;\r\n        width: 250px;\r\n    }\r\n    .addButton {\r\n        margin: 20px;\r\n    }\r\n    .tableWrapper {\r\n        height: 100%;\r\n        overflow: auto;\r\n        max-height: 250px;\r\n    }\r\n`\r\n\r\nexport const StyledFirstQuarter = styled(Grid)`\r\n    height: 100%;\r\n\r\n    .positionElements {\r\n        border: 1px solid #ccc;\r\n        border-radius: 16px;\r\n        margin: 40px 0px;\r\n        height: 30px;\r\n        padding-top: 5px;\r\n        padding-left: 15px;\r\n    }\r\n\r\n    .saveButton {\r\n        margin: 50px 0px;\r\n    }\r\n`","export enum Positions {\r\n    POINT_GUARD = 'Point Guard(PG)',\r\n    SHOOTING_GUARD = 'Shooting Guard(SG)',\r\n    SMALL_FORWARD = 'Small Forward(SF)',\r\n    POWER_FORWARD = 'Power Forward(PF)',\r\n    CENTER = 'Center(C)'\r\n}","import * as React from 'react';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    Input,\r\n    InputLabel,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { Positions } from '../enums';\r\nimport { StyledTeamComposerWrapper } from './Style';\r\nimport { ITeamComposerProps } from '../interfaces/ITeamComposerProps';\r\n\r\nexport const TeamComposer = (props: ITeamComposerProps): React.ReactElement => {\r\n    const [firstName, setFirstName] = React.useState<string>('');\r\n    const [lastName, setLastName] = React.useState<string>('');\r\n    const [height, setHeight] = React.useState<number | string>('');\r\n    const [positions, setPositions] = React.useState<Array<Positions>>([] as Array<Positions>);\r\n    const [heightError, setHeightError] = React.useState<boolean>(false);\r\n    const [blankError, setBlankError] = React.useState<boolean>(false);\r\n\r\n    const handleFirstNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setBlankError(false);\r\n        setFirstName(event.target.value);\r\n    }\r\n    const handleLastNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setBlankError(false);\r\n        setLastName(event.target.value);\r\n    }\r\n    const handleHeightChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setBlankError(false);\r\n        const numbers: RegExp = /^[0-9\\b]+$/;\r\n        if (event.target.value === '' || numbers.test(event.target.value)) {\r\n            setHeight(event.target.value);\r\n            setHeightError(false);\r\n        }\r\n        else setHeightError(true);\r\n    }\r\n    const handlePositionChange = (event: React.ChangeEvent<{ value: unknown }>): void => {\r\n        setBlankError(false);\r\n        setPositions(event.target.value as Array<Positions>);\r\n    }\r\n    const handleSubmitClick = (): void => {\r\n        if (firstName && lastName && height && positions.length !== 0) {\r\n            props.onAddButtonClick({\r\n                firstName,\r\n                lastName,\r\n                height: Number(height),\r\n                position: positions\r\n\r\n            });\r\n            setFirstName('');\r\n            setLastName('');\r\n            setHeight('');\r\n            setPositions([] as Array<Positions>);\r\n            setBlankError(false);\r\n        }\r\n        else {\r\n            setBlankError(true);\r\n        }\r\n        props.showFirstQuarterTab(props.players);\r\n    }\r\n\r\n    const renderTable = (): React.ReactElement => (\r\n        <TableContainer className=\"tableWrapper\">\r\n            <Table stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">Name</TableCell>\r\n                        <TableCell align=\"left\">Height</TableCell>\r\n                        <TableCell align=\"left\">Position(s)</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.players.map((player) => (\r\n                        <TableRow key={player.id}>\r\n                            <TableCell align=\"left\">{`${player.firstName} ${player.lastName}`}</TableCell>\r\n                            <TableCell align=\"left\">{player.height}</TableCell>\r\n                            <TableCell align=\"left\">{player.position.join(', ')}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n\r\n    return (\r\n        <StyledTeamComposerWrapper container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <TextField required id=\"firstName\" className=\"inputFields\" error={blankError} label=\"First Name\" value={firstName} onChange={handleFirstNameChange} />\r\n            <TextField required id=\"lastName\" className=\"inputFields\" error={blankError} label=\"Last Name\" value={lastName} onChange={handleLastNameChange} />\r\n            <TextField required id=\"height\" className=\"inputFields\" error={heightError || blankError} helperText={heightError && 'Height must be a number'} label=\"Height\" value={height} onChange={handleHeightChange} />\r\n            <FormControl className=\"inputFields\" error={blankError}>\r\n                <InputLabel id=\"position-name-label\">Position</InputLabel>\r\n                <Select\r\n                    labelId=\"position-label\"\r\n                    id=\"position\"\r\n                    multiple\r\n                    value={positions}\r\n                    onChange={handlePositionChange}\r\n                    input={<Input />}\r\n                    renderValue={(selected) => (selected as string[]).join(', ')}\r\n                >\r\n                    {Object.values(Positions).map((position) => (\r\n                        <MenuItem key={position} value={position}>\r\n                            <Checkbox checked={positions.indexOf(position) > -1} />\r\n                            <ListItemText primary={position} />\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            <Button variant=\"contained\" color=\"primary\" className=\"addButton\" onClick={handleSubmitClick}>\r\n                Add Player\r\n            </Button>\r\n            {blankError && <Alert className=\"inputFields\" severity=\"error\">Please, fill all the details!</Alert>}\r\n            {renderTable()}\r\n        </StyledTeamComposerWrapper>\r\n    )\r\n}","export const ADD_PLAYER: string = 'ADD_PLAYER';","import { BaseAction } from \"./BaseAction\";\r\nimport { ADD_PLAYER } from \"../constants\";\r\nimport { IPlayerDetails } from \"../interfaces/IPlayerDetails\";\r\nimport { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\n\r\n/**\r\n * These interfaces defines type for actions.\r\n */\r\nexport interface IAddPlayer extends BaseAction<IPlayerDetailsIdentifier> { }\r\n\r\nlet playerId: number = 0;\r\nexport const addPlayer: (playerDetails: IPlayerDetails) => IAddPlayer = (playerDetails) => ({\r\n    type: ADD_PLAYER,\r\n    payload: { id: ++playerId, firstName: playerDetails.firstName, lastName: playerDetails.lastName, height: playerDetails.height, position: playerDetails.position }\r\n});\r\n","import { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\nimport { IBasketballTeamManagerGlobalState } from \"../interfaces/IBasketballTeamManagerGlobalState\";\r\n\r\nexport const getPlayerDetails = (state: IBasketballTeamManagerGlobalState): Array<IPlayerDetailsIdentifier> => {\r\n    return state.domain.players;\r\n}","import { Dispatch } from \"redux\";\r\nimport { connect } from 'react-redux';\r\nimport { TeamComposer } from \"../components/TeamComposer\";\r\nimport { addPlayer } from \"../actions/TeamManagerActions\";\r\nimport { IPlayerDetails } from \"../interfaces/IPlayerDetails\";\r\nimport { getPlayerDetails } from \"../selectors/getPlayerDetails\";\r\nimport { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\nimport { IBasketballTeamManagerGlobalState } from \"../interfaces/IBasketballTeamManagerGlobalState\";\r\n\r\ninterface IStateProps {\r\n    players: Array<IPlayerDetailsIdentifier>;\r\n}\r\n\r\ninterface IDispatchProps {\r\n    onAddButtonClick: (playerDetails: IPlayerDetails) => void;\r\n}\r\n\r\ninterface IOwnProps {\r\n    showFirstQuarterTab: (players: Array<IPlayerDetailsIdentifier>) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: IBasketballTeamManagerGlobalState): IStateProps => ({\r\n    players: getPlayerDetails(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: IOwnProps): IDispatchProps & IOwnProps => ({\r\n    onAddButtonClick: (playerDetails: IPlayerDetails) => dispatch(addPlayer(playerDetails)),\r\n    showFirstQuarterTab: (players: Array<IPlayerDetailsIdentifier>) => ownProps.showFirstQuarterTab(players)\r\n})\r\n\r\nexport const ConnectedTeamComposer = connect(mapStateToProps, mapDispatchToProps)(TeamComposer);","import { connect } from 'react-redux';\r\nimport { FirstQuarter } from \"../components/FirstQuarter\";\r\nimport { getPlayerDetails } from \"../selectors/getPlayerDetails\";\r\nimport { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\nimport { IBasketballTeamManagerGlobalState } from \"../interfaces/IBasketballTeamManagerGlobalState\";\r\n\r\ninterface IStateProps {\r\n    players: Array<IPlayerDetailsIdentifier>;\r\n}\r\n\r\nconst mapStateToProps = (state: IBasketballTeamManagerGlobalState): IStateProps => ({\r\n    players: getPlayerDetails(state)\r\n})\r\n\r\nexport const ConnectedFirstQuarter = connect(mapStateToProps)(FirstQuarter);","import * as React from 'react';\r\nimport {\r\n    Grid,\r\n    MenuItem,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { Positions } from '../enums';\r\nimport { StyledFirstQuarter } from './Style';\r\nimport { IFirstQuarterProps } from '../interfaces/IFirstQuarterProps';\r\n\r\n\r\ninterface IPlayersData {\r\n    position: Positions;\r\n    playerId: number;\r\n}\r\n\r\nexport const FirstQuarter = (props: IFirstQuarterProps): React.ReactElement => {\r\n    const [playersFinalised, setPlayersFinalised] = React.useState<boolean>(false);\r\n    const [selectAllPlayersWarning, setSelectAllPlayersWarning] = React.useState<boolean>(false);\r\n    const [error, setError] = React.useState<Array<Positions>>([] as Array<Positions>);\r\n    const [playersList, setPlayersList] = React.useState<Array<IPlayersData>>([] as Array<IPlayersData>);\r\n\r\n    const handleError = (): void => {\r\n        const playerIdList: Array<number> = playersList.map(player => player.playerId);\r\n        const duplicateId: number | undefined = playerIdList.find((playerId, index) => playerIdList.indexOf(playerId) !== index);\r\n\r\n        if (duplicateId) {\r\n            const redundantData: Array<Positions> = [] as Array<Positions>;\r\n            playersList.forEach(player => {\r\n                player.playerId === duplicateId && redundantData.push(player.position)\r\n            });\r\n            redundantData && setError(redundantData);\r\n        } else {\r\n            setError([] as Array<Positions>);\r\n        }\r\n    }\r\n\r\n    const addPlayers = (\r\n        playerId: number,\r\n        position: Positions,\r\n        playersData: Array<IPlayersData>\r\n    ): Array<IPlayersData> => {\r\n        for (let index = 0; index < playersList.length; index++) {\r\n            if (playersData[index].position === position) {\r\n                playersData.splice(index, 1, { playerId, position });\r\n                return playersData;\r\n            }\r\n        }\r\n        playersData.push({ playerId, position })\r\n        return playersData;\r\n    }\r\n\r\n    const handlePlayerChange = (event: React.ChangeEvent<{ value: unknown }>, position: Positions): void => {\r\n        const playerId: number = event.target.value as number;\r\n        let playersData: Array<IPlayersData> = playersList;\r\n\r\n        if (playersList.length === 0) {\r\n            playersData.push({\r\n                playerId,\r\n                position\r\n            });\r\n        } else {\r\n            playersData = addPlayers(playerId, position, playersData);\r\n        }\r\n        setPlayersList(playersData);\r\n        setPlayersFinalised(false);\r\n        setSelectAllPlayersWarning(false);\r\n        //Error Handling\r\n        handleError();\r\n    }\r\n\r\n    const handleSaveButtonClick = (): void => {\r\n        if (playersList.length === 5) {\r\n            setPlayersFinalised(true);\r\n            setSelectAllPlayersWarning(false);\r\n        } else {\r\n            setSelectAllPlayersWarning(true);\r\n            setPlayersFinalised(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledFirstQuarter container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\">\r\n                {Object.values(Positions).map((position, index) => (\r\n                    <Grid container direction=\"column\" key={`${position}_wrapper`} item sm={2}>\r\n                        <span className=\"positionElements\">{position}</span>\r\n                        <FormControl>\r\n                            <InputLabel id={`${position}-name-label`}>{`Player ${index + 1}`}</InputLabel>\r\n                            <Select\r\n                                id={position}\r\n                                defaultValue=\"\"\r\n                                error={error.includes(position)}\r\n                                onChange={(event) => handlePlayerChange(event, position)}\r\n                            >\r\n                                {props.players.map(player => (\r\n                                    player.position.includes(position) && <MenuItem key={player.id} value={player.id}> {`${player.firstName} ${player.lastName}`}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <Button variant=\"contained\" color=\"primary\" className=\"saveButton\" onClick={handleSaveButtonClick}>\r\n                Save\r\n            </Button>\r\n            {error.length !== 0 && <Alert severity=\"error\">Player can be selected only once.</Alert>}\r\n            {selectAllPlayersWarning && <Alert severity=\"warning\">Please, select all the players before moving forward.</Alert>}\r\n            {playersFinalised && <Alert severity=\"success\">Teams selection done for first quarter. All the best!</Alert>}\r\n        </StyledFirstQuarter>\r\n    )\r\n}","import * as React from 'react';\r\nimport { AppBar, Tab, Tabs } from '@material-ui/core';\r\nimport { StyledTeamManagerWrapper } from './Style';\r\nimport { ConnectedTeamComposer } from '../containers/ConnectedTeamComposer';\r\nimport { ConnectedFirstQuarter } from '../containers/ConnectedFirstQuarter';\r\nimport { IPlayerDetailsIdentifier } from '../interfaces/IPlayerDetailsIdentifier';\r\n\r\nexport const TeamManager = (): React.ReactElement => {\r\n    const [tabValue, setTabValue] = React.useState<number>(0);\r\n    const [disable, setDisable] = React.useState<boolean>(true);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleFirstQuarterTab = (players: Array<IPlayerDetailsIdentifier>) => {\r\n        if (players.length >= 4) {\r\n            setDisable(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledTeamManagerWrapper container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <AppBar position=\"static\">\r\n                <Tabs value={tabValue} onChange={handleChange}>\r\n                    <Tab id=\"composeTeamTab\" label=\"Compose Team\" />\r\n                    <Tab id=\"firstQuarterTab\" label=\"First Quarter\" disabled={disable} />\r\n                </Tabs>\r\n            </AppBar>\r\n            {tabValue === 0\r\n                ? <ConnectedTeamComposer showFirstQuarterTab={handleFirstQuarterTab} />\r\n                : <ConnectedFirstQuarter />\r\n            }\r\n        </StyledTeamManagerWrapper>\r\n    )\r\n};","import { Grid } from '@material-ui/core';\nimport * as React from 'react';\nimport './App.css';\nimport { TeamManager } from './redux-app/components/TeamManager';\n\nconst App = (): React.ReactElement => (\n  <Grid container>\n    <TeamManager />\n  </Grid>\n);\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { teamManagerRootReducer } from \"../reducers/teamManagerRootReducer\";\r\n\r\nexport const store = configureStore({\r\n    reducer: combineReducers({\r\n        domain: teamManagerRootReducer\r\n    })\r\n});","import { Reducer } from \"redux\";\r\nimport { ADD_PLAYER } from \"../constants\";\r\nimport { BaseAction } from \"../actions/BaseAction\";\r\nimport { createTeamManagerInstance } from \"../service/createTeamManagerInstance\";\r\nimport { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\nimport { IBasketballTeamManagerState } from \"../interfaces/IBasketballTeamManagerState\";\r\n\r\nexport const teamManagerRootReducer: Reducer<IBasketballTeamManagerState, BaseAction<any>> = (\r\n    state: IBasketballTeamManagerState = createTeamManagerInstance(),\r\n    action: BaseAction<any>\r\n): IBasketballTeamManagerState => {\r\n    switch (action.type) {\r\n        case ADD_PLAYER:\r\n            const players: Array<IPlayerDetailsIdentifier> = state.players.concat(action.payload);\r\n            return { ...state, players };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IPlayerDetailsIdentifier } from \"../interfaces/IPlayerDetailsIdentifier\";\r\nimport { IBasketballTeamManagerState } from \"../interfaces/IBasketballTeamManagerState\";\r\n\r\nexport const createTeamManagerInstance = (): IBasketballTeamManagerState => ({\r\n    players: [] as Array<IPlayerDetailsIdentifier>\r\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux-app/store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}